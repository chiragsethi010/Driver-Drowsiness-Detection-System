import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
import tensorflow as tf
from tensorflow import keras
import seaborn as sns
import matplotlib.pyplot as plt

# Set the style using seaborn
sns.set(style='whitegrid')

# Set the figure size
plt.figure(figsize=(8, 6))

# Set the path to your dataset directories
drowsy_dir = r"C:\Users\user\Desktop\Driver Drowsiness Dataset (DDD)\Drowsy1"
non_drowsy_dir = r"C:\Users\user\Desktop\Driver Drowsiness Dataset (DDD)\Non Drowsey1"

# Function to load the dataset
def load_dataset():
    dataset = []
    
    # Load drowsy samples
    for filename in os.listdir(drowsy_dir):
        image = cv2.imread(os.path.join(drowsy_dir, filename))
        dataset.append((image, 'Drowsy'))  # Assign label 'Drowsy' for drowsy samples
    
    # Load non-drowsy samples
    for filename in os.listdir(non_drowsy_dir):
        image = cv2.imread(os.path.join(non_drowsy_dir, filename))
        dataset.append((image, 'Not Drowsy'))  # Assign label 'Not Drowsy' for non-drowsy samples
    
    return dataset

# Preprocessing function
def preprocess_image(image):
    image = cv2.resize(image, (64, 64))
    image = image / 255.0
    return image

# Load and preprocess the dataset
dataset = load_dataset()

preprocessed_images = []
labels = []

for image, label in dataset:
    preprocessed_image = preprocess_image(image)
    preprocessed_images.append(preprocessed_image)
    labels.append(label)

# Convert the lists to NumPy arrays
preprocessed_images = np.array(preprocessed_images)
labels = np.array(labels)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(preprocessed_images, labels, test_size=0.2, random_state=42)

# Define and compile the CNN model
model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation='relu'),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(1, (3, 3), activation='relu'),  # Add this new Conv2D layer
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(2, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Convert labels to numerical values
label_to_id = {'Drowsy': 0, 'Not Drowsy': 1}
y_train_ids = np.array([label_to_id[label] for label in y_train])
y_test_ids = np.array([label_to_id[label] for label in y_test])

# Train the model
model.fit(X_train, y_train_ids, epochs=10, batch_size=32)

# Extract features from the trained CNN model
feature_extractor = keras.Model(inputs=model.inputs, outputs=model.layers[-3].output)
train_features = feature_extractor.predict(X_train)
test_features = feature_extractor.predict(X_test)

# Train an SVM classifier using the extracted features
svm_classifier = svm.SVC()
svm_classifier.fit(train_features, y_train_ids)

# Predict labels for training and testing sets
train_predictions = svm_classifier.predict(train_features)
test_predictions = svm_classifier.predict(test_features)

# Calculate accuracy
train_accuracy = accuracy_score(y_train_ids, train_predictions)
test_accuracy = accuracy_score(y_test_ids, test_predictions)

print("Training Accuracy:", train_accuracy)
print("Testing Accuracy:", test_accuracy)

# Calculate overall accuracy
overall_accuracy = accuracy_score(y_test_ids, test_predictions)
print('Overall Accuracy: {:.2f}%'.format(overall_accuracy * 100))

# Convert label ids back to original labels
id_to_label = {0: 'Drowsy', 1: 'Not Drowsy'}
y_test_labels = np.array([id_to_label[id] for id in y_test_ids])
test_predictions_labels = np.array([id_to_label[id] for id in test_predictions])

# Plot the accuracy graph
plt.plot(test_predictions_labels, label='Predictions')
plt.plot(y_test_labels, label='True Labels')
plt.xlabel('Test Sample')
plt.ylabel('Label')
plt.title('True Labels vs Predictions')
plt.legend()
plt.show()

# Assuming you have a test image and its corresponding label
test_image_path = r"C:\Users\user\Desktop\Driver Drowsiness Dataset (DDD)\Drowsy\A0023.png"
true_label = 'Not Drowsy'  # The true label of the test image

# Load the test image
test_image = cv2.imread(test_image_path)

# Preprocess the test image
preprocessed_test_image = preprocess_image(test_image)

# Display the preprocessed image
plt.subplot(2, 2, 1)
plt.imshow(preprocessed_test_image, cmap='gray')
plt.title('Preprocessed Image')
plt.axis('off')

# Extract features from the preprocessed test image using the CNN model
test_features = feature_extractor.predict(np.expand_dims(preprocessed_test_image, axis=0))

# Display the extracted features
plt.subplot(2, 2, 2)
plt.imshow(test_features.reshape(-1, 1), cmap='gray')
plt.title('Extracted Features')
plt.axis('off')

# Predict the label using the SVM classifier
predicted_label_id = svm_classifier.predict(test_features)[0]
predicted_label = id_to_label[predicted_label_id]

# Update the true label with the predicted label
true_label = predicted_label

# Display the true label
plt.subplot(2, 2, 3)
plt.imshow(test_image, cmap='gray')
plt.title('True Label: {}'.format(true_label))
plt.axis('off')

# Display the predicted label
plt.subplot(2, 2, 4)
plt.imshow(test_image, cmap='gray')
plt.title('Predicted Label: {}'.format(predicted_label))
plt.axis('off')

# Adjust the spacing between subplots
plt.tight_layout()

# Show the figure
plt.show()